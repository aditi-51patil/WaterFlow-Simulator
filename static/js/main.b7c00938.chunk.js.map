{"version":3,"sources":["Modules/EnterInputs/EnterInputs.js","Components/DraggableBox/DraggableBox.js","Components/DroppableBox/DroppableBox.js","Modules/GridComp/GridComp.js","Modules/WaterSimulator/WaterSimulator.js","App.js","reportWebVitals.js","index.js"],"names":["EnterInputs","rowVal","rowsChange","handleSubmit","rowError","columnError","columnsVal","columnsChange","obstructionVal","obstructionChange","obstructionError","style","width","padding","onSubmit","sub","preventDefault","htmlFor","class","type","value","onChange","id","name","min","max","color","className","DraggableBox","size","i","addObstruction","useDrag","collect","monitor","isDragging","drag","ref","background","height","border","DroppableBox","isFull","children","useDrop","accept","drop","console","log","canDrop","item","isOver","GridComp","rowCount","columnsCount","obstructionCount","useState","obstructionList","setObstructionList","obsCount","setObsCount","waterFlow","setWaterFlow","entryPrompt","setEntryPrompt","entryPoint","setEntryPoint","calculateSimulation","useCallback","entry","includes","filledArray","currentHeads","visited","newHeads","arr","Set","filter","items","sort","a","b","push","every","index","forward","left","calculateLeft","right","calculateRight","length","resetFlow","prev","prevState","createMainGrid","rows","columns","mainGrid","display","flexDirection","justifyContent","entryDiv","onClick","entrySelection","cursor","createEntryGrid","map","flexWrap","boxSizing","alignContent","createDraggableGrid","WaterSimulator","props","step","setStep","setRowVal","touched","error","setRowError","setColumnsVal","setColumnError","setObstructionVal","setObstructionError","isSubmitDone","setIsSubmitDone","handleValidation","source","useEffect","e","parseInt","target","renderStep","App","options","HTML5toTouch","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b7c00938.chunk.js","sourcesContent":["import React from \"react\";\r\nexport const EnterInputs = ({\r\n  rowVal,\r\n  rowsChange,\r\n  handleSubmit,\r\n  rowError,\r\n  columnError,\r\n  columnsVal,\r\n  columnsChange,\r\n  obstructionVal,\r\n  obstructionChange,\r\n  obstructionError,\r\n}) => {\r\n  return (\r\n    <div style={{ width: \"700px\", padding: \"100px\" }}>\r\n      <form\r\n        onSubmit={(sub) => {\r\n          sub.preventDefault();\r\n          handleSubmit(sub);\r\n        }}\r\n      >\r\n        <div>\r\n          <label htmlFor=\"row\">\r\n            <h5 class=\"text-2xl font-normal leading-normal mt-0 mb-2 \">\r\n              Number of rows(1-10): {rowVal}\r\n            </h5>\r\n          </label>\r\n          <input\r\n            type=\"range\"\r\n            value={rowVal}\r\n            onChange={rowsChange}\r\n            id=\"row\"\r\n            name=\"row\"\r\n            min=\"0\"\r\n            max=\"10\"\r\n          />\r\n          <div style={{ color: \"red\" }}>{rowError}</div>\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"column\">\r\n            <h5 class=\"text-2xl font-normal leading-normal mt-0 mb-2\">\r\n              Number of columns(1-10): {columnsVal}\r\n            </h5>\r\n          </label>\r\n          <input\r\n            type=\"range\"\r\n            value={columnsVal}\r\n            onChange={columnsChange}\r\n            id=\"column\"\r\n            name=\"column\"\r\n            min=\"0\"\r\n            max=\"10\"\r\n          />\r\n          <div style={{ color: \"red\" }}>{columnError}</div>\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"obstruction\">\r\n            <h5 class=\"text-2xl font-normal leading-normal mt-0 mb-2\">\r\n              Number of Obstructions(1-10): {obstructionVal}\r\n            </h5>\r\n          </label>\r\n          <input\r\n            type=\"range\"\r\n            value={obstructionVal}\r\n            onChange={obstructionChange}\r\n            id=\"obstruction\"\r\n            name=\"obstruction\"\r\n            min=\"0\"\r\n            max=\"10\"\r\n          />\r\n          <div style={{ color: \"red\" }}>{obstructionError}</div>\r\n        </div>\r\n        <div>\r\n          {/* <input type=\"submit\" /> */}\r\n\r\n          <button\r\n            type=\"submit\"\r\n            // onClick={() => {\r\n            //   setStep(1);\r\n            // }}\r\n            className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4  my-0.5 mx-0.5 rounded\"\r\n          >\r\n            Next\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useDrag } from \"react-dnd\";\r\nexport const DraggableBox = ({ size, i, addObstruction }) => {\r\n  const [{ isDragging }, drag] = useDrag(() => ({\r\n    type: \"BLOCK_DIV\",\r\n    // end: () => addObstruction(i),\r\n\r\n    collect: (monitor) => ({\r\n      isDragging: !!monitor.isDragging(),\r\n    }),\r\n  }));\r\n  return (\r\n    <div\r\n      ref={drag}\r\n      //   key={i}\r\n      className=\"m-px\"\r\n      style={{\r\n        background: \"black\",\r\n        height: size + \"px\",\r\n        width: size + \"px\",\r\n        border: \"1px solid black\",\r\n      }}\r\n    ></div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useDrop } from \"react-dnd\";\r\n\r\nexport const DroppableBox = ({\r\n  color,\r\n  isFull,\r\n  size,\r\n  addObstruction,\r\n  i,\r\n  children,\r\n}) => {\r\n  const [, drop] = useDrop(\r\n    () => ({\r\n      accept: \"BLOCK_DIV\",\r\n      drop: () => {\r\n        console.log(i);\r\n        addObstruction(i);\r\n      },\r\n      canDrop: (item, monitor) => {\r\n        return !isFull;\r\n      },\r\n      collect: (monitor) => ({\r\n        isOver: !!monitor.isOver(),\r\n      }),\r\n    }),\r\n    [i, isFull]\r\n  );\r\n  return (\r\n    <div\r\n      ref={drop}\r\n      key={i}\r\n      style={{\r\n        background: isFull ? \"black\" : color,\r\n        height: size + \"px\",\r\n        width: size + \"px\",\r\n        border: \"1px solid black\",\r\n      }}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useCallback } from \"react\";\r\nimport { DraggableBox } from \"../../Components/DraggableBox/DraggableBox\";\r\nimport { DroppableBox } from \"../../Components/DroppableBox/DroppableBox\";\r\n\r\nexport const GridComp = ({ rowCount, columnsCount, obstructionCount }) => {\r\n  const [obstructionList, setObstructionList] = useState([]);\r\n  const [obsCount, setObsCount] = useState(obstructionCount);\r\n  const [waterFlow, setWaterFlow] = useState([]);\r\n  const [entryPrompt, setEntryPrompt] = useState(\"\");\r\n  const [entryPoint, setEntryPoint] = useState(null);\r\n  const entrySelection = (i) => {\r\n    if (entryPoint != null) {\r\n      resetFlow();\r\n      setObstructionList([]);\r\n      setObsCount(obstructionCount);\r\n    } else if (entryPrompt) {\r\n      setEntryPoint(i);\r\n      calculateSimulation(i);\r\n    }\r\n  };\r\n  const calculateForward = (index) => {\r\n    return !obstructionList.includes(index + columnsCount)\r\n      ? index + columnsCount\r\n      : null;\r\n  };\r\n  const calculateLeft = (index) => {\r\n    return index - 1 >= 0 &&\r\n      index % columnsCount != 0 &&\r\n      !obstructionList.includes(index - 1)\r\n      ? index - 1\r\n      : null;\r\n  };\r\n  const calculateRight = (index) => {\r\n    return (index + 1) % columnsCount != 0 &&\r\n      !obstructionList.includes(index + 1)\r\n      ? index + 1\r\n      : null;\r\n  };\r\n  const calculateSimulation = useCallback(\r\n    (entry) => {\r\n      if (obstructionList.includes(entry)) {\r\n        return;\r\n      } else {\r\n        const filledArray = [entry];\r\n        let currentHeads = [entry];\r\n        const visited = [];\r\n        while (currentHeads.length) {\r\n          const newHeads = [];\r\n          const arr = [...new Set(currentHeads)]\r\n            .filter((items) => !visited.includes(items))\r\n            .sort((a, b) => a - b);\r\n          console.log(visited);\r\n          visited.push(...arr);\r\n          console.log(visited);\r\n          [...arr].every((item) => {\r\n            let forward = calculateForward(item);\r\n            if (forward != null) {\r\n              if (forward <= rowCount * columnsCount - 1) {\r\n                filledArray.push(forward);\r\n                newHeads.push(forward);\r\n              }\r\n            } else {\r\n              let left = calculateLeft(item);\r\n              let right = calculateRight(item);\r\n              if (left != null) {\r\n                filledArray.push(left);\r\n                newHeads.push(left);\r\n              }\r\n              if (right != null) {\r\n                filledArray.push(right);\r\n                newHeads.push(right);\r\n              }\r\n            }\r\n            if (forward != null && forward > rowCount * columnsCount - 1) {\r\n              return false;\r\n            }\r\n            return true;\r\n          });\r\n\r\n          currentHeads = newHeads;\r\n        }\r\n        setWaterFlow([...new Set(filledArray)]);\r\n      }\r\n    },\r\n    [obstructionList, entryPoint]\r\n  );\r\n  const createEntryGrid = () => {\r\n    const entryDiv = [];\r\n    const size = 500 / columnsCount;\r\n    for (let i = 0; i < columnsCount; i++) {\r\n      entryDiv.push(\r\n        <div\r\n          onClick={() => entrySelection(i)}\r\n          key={i}\r\n          style={{\r\n            background: entryPoint == i ? \"blue\" : \"#cdcdff\",\r\n            height: size + \"px\",\r\n            width: size + \"px\",\r\n            border: \"1px solid white\",\r\n            cursor: \"pointer\",\r\n          }}\r\n        ></div>\r\n      );\r\n    }\r\n    return entryDiv;\r\n  };\r\n  const startSimulation = () => {\r\n    setEntryPrompt(\r\n      \"Please Select an entry point by clicking on one of the  blue boxes\"\r\n    );\r\n  };\r\n  const createDraggableGrid = () => {\r\n    const entryDiv = [];\r\n    const size = 500 / columnsCount;\r\n    for (let i = 0; i < obsCount; i++) {\r\n      entryDiv.push(<DraggableBox size={size} i={i} />);\r\n    }\r\n    return entryDiv;\r\n  };\r\n  const addObstruction = (i) => {\r\n    resetFlow();\r\n    setObsCount((prev) => prev - 1);\r\n    setObstructionList((prevState) => [...prevState, i]);\r\n  };\r\n  const resetFlow = () => {\r\n    setWaterFlow([]);\r\n    setEntryPoint(null);\r\n    setEntryPrompt(\"\");\r\n  };\r\n  const createMainGrid = useCallback(\r\n    (rows, columns) => {\r\n      const mainGrid = [];\r\n      const size = 500 / columnsCount;\r\n      for (let i = 0; i < rows * columns; i++) {\r\n        // console.log(obstructionList);\r\n        mainGrid.push(\r\n          <DroppableBox\r\n            size={size}\r\n            isFull={obstructionList.includes(i)}\r\n            addObstruction={addObstruction}\r\n            i={i}\r\n            color={waterFlow.includes(i) ? \"blue\" : \"white\"}\r\n          >\r\n            {obstructionList.includes(i) ? (\r\n              <div\r\n                key={i}\r\n                className=\"m-px\"\r\n                style={{\r\n                  background: \"black\",\r\n                  height: \"50px\",\r\n                  width: \"50px\",\r\n                  border: \"1px solid black\",\r\n                }}\r\n              ></div>\r\n            ) : null}\r\n          </DroppableBox>\r\n        );\r\n      }\r\n      return mainGrid;\r\n    },\r\n    [obstructionList, waterFlow]\r\n  );\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"row\",\r\n          justifyContent: \"left\",\r\n          width: \"100vw\",\r\n          justifyContent: \"space-evenly\",\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n          }}\r\n        >\r\n          {entryPrompt}\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"row\",\r\n            }}\r\n            className=\"my-0.5\"\r\n          >\r\n            {createEntryGrid().map((item) => {\r\n              return item;\r\n            })}\r\n          </div>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"row\",\r\n              width: \"500px\",\r\n              flexWrap: \"wrap\",\r\n              border: \"1px solid black\",\r\n              boxSizing: \"content-box\",\r\n            }}\r\n          >\r\n            {createMainGrid(rowCount, columnsCount).map((item) => {\r\n              return item;\r\n            })}\r\n          </div>\r\n        </div>\r\n        <div\r\n          key=\"x-draggable\"\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            width: \"200px\",\r\n            background: \"white\",\r\n            flexWrap: \"wrap\",\r\n            // border: \"1px solid black\",\r\n            boxSizing: \"content-box\",\r\n            alignContent: \"flex-start\",\r\n          }}\r\n        >\r\n          {createDraggableGrid().map((item) => {\r\n            return item;\r\n          })}\r\n        </div>\r\n      </div>\r\n      <button\r\n        onClick={startSimulation}\r\n        className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4  my-0.5 mx-0.5 rounded\"\r\n      >\r\n        Start Simulation\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { EnterInputs } from \"../EnterInputs/EnterInputs\";\r\nimport { GridComp } from \"../GridComp/GridComp\";\r\nexport const WaterSimulator = (props) => {\r\n  const [step, setStep] = useState(0);\r\n  const [rowVal, setRowVal] = useState(0);\r\n  const [rowError, setRowError] = useState({ touched: false, error: \"\" });\r\n  const [columnsVal, setColumnsVal] = useState(0);\r\n  const [columnError, setColumnError] = useState({ touched: false, error: \"\" });\r\n  const [obstructionVal, setObstructionVal] = useState(0);\r\n  const [obstructionError, setObstructionError] = useState({\r\n    touched: false,\r\n    error: \"\",\r\n  });\r\n  const [isSubmitDone, setIsSubmitDone] = useState(false);\r\n  const handleValidation = (source) => {\r\n    if (rowVal == 0 && rowError.touched) {\r\n      setRowError((prevState) => ({\r\n        touched: source == \"submit\" ? true : prevState.touched,\r\n        error: \"Row is required\",\r\n      }));\r\n    } else {\r\n      setRowError((prevState) => ({\r\n        touched: source == \"submit\" ? true : prevState.touched,\r\n        error: \"\",\r\n      }));\r\n    }\r\n    if (columnsVal == 0 && columnError.touched) {\r\n      setColumnError((prevState) => ({\r\n        touched: source == \"submit\" ? true : prevState.touched,\r\n        error: \"Columns is required\",\r\n      }));\r\n    } else {\r\n      setColumnError((prevState) => ({\r\n        touched: source == \"submit\" ? true : prevState.touched,\r\n        error: \"\",\r\n      }));\r\n    }\r\n    if (obstructionVal == 0 && obstructionError.touched) {\r\n      setObstructionError((prevState) => ({\r\n        touched: source == \"submit\" ? true : prevState.touched,\r\n        error: \"Obstruction is required\",\r\n      }));\r\n    } else {\r\n      setObstructionError((prevState) => ({\r\n        touched: source == \"submit\" ? true : prevState.touched,\r\n        error: \"\",\r\n      }));\r\n    }\r\n    if (rowVal > 0 && columnsVal > 0 && obstructionVal > 0) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    if (isSubmitDone) {\r\n      handleValidation();\r\n    }\r\n  }, [isSubmitDone, rowVal, columnsVal, obstructionVal]);\r\n  const rowsChange = (e) => {\r\n    setRowVal(parseInt(e.target.value, 10));\r\n    setRowError({\r\n      touched: true,\r\n      error: e.target.value == 0 ? \"row is required\" : \"\",\r\n    });\r\n    // handleValidation();\r\n  };\r\n  const columnsChange = (e) => {\r\n    setColumnsVal(parseInt(e.target.value, 10));\r\n    setColumnError({\r\n      touched: true,\r\n      error: e.target.value == 0 ? \"columns is required\" : \"\",\r\n    });\r\n  };\r\n  const obstructionChange = (e) => {\r\n    setObstructionVal(parseInt(e.target.value, 10));\r\n    setObstructionError({\r\n      touched: true,\r\n      error: e.target.value == 0 ? \"obstruction is required\" : \"\",\r\n    });\r\n    // handleValidation();\r\n  };\r\n  const handleSubmit = (e) => {\r\n    setIsSubmitDone(true);\r\n    let success = handleValidation(\"submit\");\r\n    if (success) {\r\n      setStep(1);\r\n    }\r\n    console.log(e);\r\n  };\r\n  const renderStep = useCallback(() => {\r\n    if (step == 0) {\r\n      return (\r\n        <div>\r\n          <EnterInputs\r\n            rowError={rowError.error}\r\n            rowsChange={rowsChange}\r\n            rowVal={rowVal}\r\n            handleSubmit={handleSubmit}\r\n            columnsVal={columnsVal}\r\n            columnsChange={columnsChange}\r\n            columnError={columnError.error}\r\n            obstructionVal={obstructionVal}\r\n            obstructionChange={obstructionChange}\r\n            obstructionError={obstructionError.error}\r\n          />\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div>\r\n          <GridComp\r\n            rowCount={rowVal}\r\n            columnsCount={columnsVal}\r\n            obstructionCount={obstructionVal}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n  }, [\r\n    step,\r\n    rowVal,\r\n    rowError,\r\n    columnsVal,\r\n    columnError,\r\n    obstructionVal,\r\n    obstructionError,\r\n  ]);\r\n  return (\r\n    <div>\r\n      {renderStep()}\r\n      {step == 1 && (\r\n        <button\r\n          onClick={() => {\r\n            setStep(0);\r\n          }}\r\n          className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4  my-0.5 mx-0.5  rounded\"\r\n        >\r\n          Previous\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import { WaterSimulator } from \"./Modules/WaterSimulator/WaterSimulator.js\";\nimport \"./App.css\";\n// import { DndProvider } from \"react-dnd\";\n// import { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { DndProvider } from \"react-dnd-multi-backend\";\nimport HTML5toTouch from \"react-dnd-multi-backend/dist/esm/HTML5toTouch\";\nfunction App() {\n  return (\n    <div className=\"App main_comp\">\n      <DndProvider options={HTML5toTouch}>\n        {/* // backend={HTML5Backend}> */}\n        <WaterSimulator />\n      </DndProvider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}